
virtual_transmitter1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000125  00800060  00800060  0000033a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000107  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000585  00000000  00000000  00000461  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000285  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000639  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000212  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000188  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 38       	cpi	r26, 0x85	; 133
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  74:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  90:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
  92:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  94:	e0 91 82 01 	lds	r30, 0x0182
  98:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART_RxTail ) {
  9a:	80 91 83 01 	lds	r24, 0x0183
  9e:	e8 17       	cp	r30, r24
  a0:	11 f4       	brne	.+4      	; 0xa6 <__vector_11+0x2a>
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	08 c0       	rjmp	.+16     	; 0xb6 <__vector_11+0x3a>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  a6:	89 2f       	mov	r24, r25
  a8:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  aa:	e0 93 82 01 	sts	0x0182, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	e0 58       	subi	r30, 0x80	; 128
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
  b6:	80 93 84 01 	sts	0x0184, r24
}
  ba:	ff 91       	pop	r31
  bc:	ef 91       	pop	r30
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  e0:	90 91 80 01 	lds	r25, 0x0180
  e4:	80 91 81 01 	lds	r24, 0x0181
  e8:	98 17       	cp	r25, r24
  ea:	61 f0       	breq	.+24     	; 0x104 <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
  ec:	e0 91 81 01 	lds	r30, 0x0181
  f0:	ef 5f       	subi	r30, 0xFF	; 255
  f2:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
  f4:	e0 93 81 01 	sts	0x0181, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	e0 5a       	subi	r30, 0xA0	; 160
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	80 81       	ld	r24, Z
 100:	8c b9       	out	0x0c, r24	; 12
 102:	01 c0       	rjmp	.+2      	; 0x106 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 104:	55 98       	cbi	0x0a, 5	; 10
    }
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <clearBuffer>:


//Try to clear the already buffered data
void clearBuffer(){
	
	UART_RxHead = 0;
 118:	10 92 82 01 	sts	0x0182, r1
    UART_RxTail = 0;
 11c:	10 92 83 01 	sts	0x0183, r1
}
 120:	08 95       	ret

00000122 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 122:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 124:	10 92 80 01 	sts	0x0180, r1
    UART_TxTail = 0;
 128:	10 92 81 01 	sts	0x0181, r1
    UART_RxHead = 0;
 12c:	10 92 82 01 	sts	0x0182, r1
    UART_RxTail = 0;
 130:	10 92 83 01 	sts	0x0183, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 134:	97 ff       	sbrs	r25, 7
 136:	03 c0       	rjmp	.+6      	; 0x13e <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 13c:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 13e:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char) baudrate;
 140:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 142:	88 e9       	ldi	r24, 0x98	; 152
 144:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 146:	86 e8       	ldi	r24, 0x86	; 134
 148:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 14a:	08 95       	ret

0000014c <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 14c:	90 91 82 01 	lds	r25, 0x0182
 150:	80 91 83 01 	lds	r24, 0x0183
 154:	98 17       	cp	r25, r24
 156:	19 f4       	brne	.+6      	; 0x15e <uart_getc+0x12>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	31 e0       	ldi	r19, 0x01	; 1
 15c:	11 c0       	rjmp	.+34     	; 0x180 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 15e:	e0 91 83 01 	lds	r30, 0x0183
 162:	ef 5f       	subi	r30, 0xFF	; 255
    UART_RxTail = tmptail; 
 164:	e0 93 83 01 	sts	0x0183, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e0 58       	subi	r30, 0x80	; 128
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 170:	20 91 84 01 	lds	r18, 0x0184
 174:	92 2f       	mov	r25, r18
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	43 0f       	add	r20, r19
 17c:	51 1d       	adc	r21, r1
 17e:	9a 01       	movw	r18, r20

}/* uart_getc */
 180:	c9 01       	movw	r24, r18
 182:	08 95       	ret

00000184 <transmitByte>:


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 184:	5d 9b       	sbis	0x0b, 5	; 11
 186:	fe cf       	rjmp	.-4      	; 0x184 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 188:	8c b9       	out	0x0c, r24	; 12
}
 18a:	08 95       	ret

0000018c <uart_putc>:
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 18c:	5d 9b       	sbis	0x0b, 5	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <uart_putc>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 190:	8c b9       	out	0x0c, r24	; 12
    /* enable UDRE interrupt */
    /*UART0_CONTROL    |= _BV(UART0_UDRIE);*/
	
	transmitByte(data);

}/* uart_putc */
 192:	08 95       	ret

00000194 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 194:	fc 01       	movw	r30, r24
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <uart_puts+0xc>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 198:	5d 9b       	sbis	0x0b, 5	; 11
 19a:	fe cf       	rjmp	.-4      	; 0x198 <uart_puts+0x4>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 19c:	31 96       	adiw	r30, 0x01	; 1

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 19e:	8c b9       	out	0x0c, r24	; 12
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	c9 f7       	brne	.-14     	; 0x198 <uart_puts+0x4>
      uart_putc(*s++);

}/* uart_puts */
 1a6:	08 95       	ret

000001a8 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <uart_puts_p+0x8>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1aa:	5d 9b       	sbis	0x0b, 5	; 11
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <uart_puts_p+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1ae:	2c b9       	out	0x0c, r18	; 12
 1b0:	fc 01       	movw	r30, r24
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	24 91       	lpm	r18, Z+
 1b6:	22 23       	and	r18, r18
 1b8:	c1 f7       	brne	.-16     	; 0x1aa <uart_puts_p+0x2>
      uart_putc(c);

}/* uart_puts_p */
 1ba:	08 95       	ret

000001bc <forward>:



void forward()
{
		sbi(PORTD,4);
 1bc:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);
 1be:	95 9a       	sbi	0x12, 5	; 18
		
		sbi(PORTD,2);
 1c0:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 1c2:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD,7);
 1c4:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);
 1c6:	96 98       	cbi	0x12, 6	; 18
		
		
}
 1c8:	08 95       	ret

000001ca <reverse>:

void reverse()
{
		sbi(PORTD,4);
 1ca:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);
 1cc:	95 9a       	sbi	0x12, 5	; 18
		
		cbi(PORTD,2);
 1ce:	92 98       	cbi	0x12, 2	; 18
		sbi(PORTD,3);
 1d0:	93 9a       	sbi	0x12, 3	; 18
		cbi(PORTD,7);
 1d2:	97 98       	cbi	0x12, 7	; 18
		sbi(PORTD,6);
 1d4:	96 9a       	sbi	0x12, 6	; 18
		
}
 1d6:	08 95       	ret

000001d8 <left>:

void left()
{
		sbi(PORTD,4);
 1d8:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);
 1da:	95 9a       	sbi	0x12, 5	; 18
		
		cbi(PORTD,2);
 1dc:	92 98       	cbi	0x12, 2	; 18
		sbi(PORTD,3);
 1de:	93 9a       	sbi	0x12, 3	; 18
		sbi(PORTD,7);
 1e0:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);	
 1e2:	96 98       	cbi	0x12, 6	; 18

}
 1e4:	08 95       	ret

000001e6 <right>:


void right()
{
		sbi(PORTD,4);
 1e6:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);
 1e8:	95 9a       	sbi	0x12, 5	; 18
		
		sbi(PORTD,2);
 1ea:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 1ec:	93 98       	cbi	0x12, 3	; 18
		cbi(PORTD,7);
 1ee:	97 98       	cbi	0x12, 7	; 18
		sbi(PORTD,6);
 1f0:	96 9a       	sbi	0x12, 6	; 18
}
 1f2:	08 95       	ret

000001f4 <rightforward>:

void rightforward()
{
		sbi(PORTD,4);
 1f4:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);
 1f6:	95 9a       	sbi	0x12, 5	; 18

		cbi(PORTD,2);
 1f8:	92 98       	cbi	0x12, 2	; 18
		cbi(PORTD,3);
 1fa:	93 98       	cbi	0x12, 3	; 18
		sbi(PORTD,7);
 1fc:	97 9a       	sbi	0x12, 7	; 18
		cbi(PORTD,6);
 1fe:	96 98       	cbi	0x12, 6	; 18
}
 200:	08 95       	ret

00000202 <leftforward>:



void leftforward()
{
		sbi(PORTD,4);
 202:	94 9a       	sbi	0x12, 4	; 18
		sbi(PORTD,5);
 204:	95 9a       	sbi	0x12, 5	; 18
		
		sbi(PORTD,2);
 206:	92 9a       	sbi	0x12, 2	; 18
		cbi(PORTD,3);
 208:	93 98       	cbi	0x12, 3	; 18
		cbi(PORTD,7);
 20a:	97 98       	cbi	0x12, 7	; 18
		cbi(PORTD,6);
 20c:	96 98       	cbi	0x12, 6	; 18

}
 20e:	08 95       	ret

00000210 <stop>:

void stop()
{
	cbi(PORTD,4);
 210:	94 98       	cbi	0x12, 4	; 18
	cbi(PORTD,5);
 212:	95 98       	cbi	0x12, 5	; 18

	cbi(PORTD,2);
 214:	92 98       	cbi	0x12, 2	; 18
	cbi(PORTD,3);
 216:	93 98       	cbi	0x12, 3	; 18
	cbi(PORTD,7);
 218:	97 98       	cbi	0x12, 7	; 18
	cbi(PORTD,6);
 21a:	96 98       	cbi	0x12, 6	; 18
}
 21c:	08 95       	ret

0000021e <motorinit>:

motorinit()
{

	sbi(DDRD,2);
 21e:	8a 9a       	sbi	0x11, 2	; 17
	sbi(DDRD,3);
 220:	8b 9a       	sbi	0x11, 3	; 17
	
	sbi(DDRD,4);
 222:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRD,5);
 224:	8d 9a       	sbi	0x11, 5	; 17
	
	sbi(DDRD,6);
 226:	8e 9a       	sbi	0x11, 6	; 17
	sbi(DDRD,7);
 228:	8f 9a       	sbi	0x11, 7	; 17


}
 22a:	08 95       	ret

0000022c <main>:


void main()
{
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
   
	uart_init(UART_BAUD_SELECT(115200,F_CPU));
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 91 00 	call	0x122	; 0x122 <uart_init>
	sei();
 23a:	78 94       	sei
	//uart_puts("welcome");
	
	sbi(DDRC,0);
 23c:	a0 9a       	sbi	0x14, 0	; 20
	sbi(DDRC,1);
 23e:	a1 9a       	sbi	0x14, 1	; 20
	sbi(DDRC,2);
 240:	a2 9a       	sbi	0x14, 2	; 20
	sbi(DDRC,3);
 242:	a3 9a       	sbi	0x14, 3	; 20
	
	motorinit();
 244:	0e 94 0f 01 	call	0x21e	; 0x21e <motorinit>
 248:	88 e8       	ldi	r24, 0x88	; 136
 24a:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 24c:	28 eb       	ldi	r18, 0xB8	; 184
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 256:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 258:	d9 f7       	brne	.-10     	; 0x250 <main+0x24>

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 25a:	11 e6       	ldi	r17, 0x61	; 97
 25c:	c8 eb       	ldi	r28, 0xB8	; 184
 25e:	d0 e0       	ldi	r29, 0x00	; 0
	
	_delay_ms(500);
	
	while(1)
	{
		c= uart_getc();
 260:	0e 94 a6 00 	call	0x14c	; 0x14c <uart_getc>
		if(c!=0)
 264:	88 23       	and	r24, r24
 266:	c9 f0       	breq	.+50     	; 0x29a <main+0x6e>
			{
			//	softuart_putchar(c);
				//uart_putc(c);
				
				if(c=='w')
 268:	87 37       	cpi	r24, 0x77	; 119
 26a:	21 f4       	brne	.+8      	; 0x274 <main+0x48>
				{
				forward();
 26c:	0e 94 de 00 	call	0x1bc	; 0x1bc <forward>
				sbi(PORTC,1);
 270:	a9 9a       	sbi	0x15, 1	; 21
 272:	13 c0       	rjmp	.+38     	; 0x29a <main+0x6e>
				
				
				}
				if(c=='s')
 274:	83 37       	cpi	r24, 0x73	; 115
 276:	31 f4       	brne	.+12     	; 0x284 <main+0x58>
				{
				cbi(PORTC,1);
 278:	a9 98       	cbi	0x15, 1	; 21
				cbi(PORTC,2);
 27a:	aa 98       	cbi	0x15, 2	; 21
				cbi(PORTC,3);
 27c:	ab 98       	cbi	0x15, 3	; 21
				stop();
 27e:	0e 94 08 01 	call	0x210	; 0x210 <stop>
 282:	0b c0       	rjmp	.+22     	; 0x29a <main+0x6e>
				
				}
				if(c=='a')
 284:	81 36       	cpi	r24, 0x61	; 97
 286:	21 f4       	brne	.+8      	; 0x290 <main+0x64>
				{
				sbi(PORTC,2);
 288:	aa 9a       	sbi	0x15, 2	; 21
				left();
 28a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <left>
 28e:	05 c0       	rjmp	.+10     	; 0x29a <main+0x6e>
				
				}
				if(c=='d')
 290:	84 36       	cpi	r24, 0x64	; 100
 292:	19 f4       	brne	.+6      	; 0x29a <main+0x6e>
				{
				
				right();
 294:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <right>
				sbi(PORTC,3);
 298:	ab 9a       	sbi	0x15, 3	; 21
	
			}
	
	
		
			sbi(PORTC,0);
 29a:	a8 9a       	sbi	0x15, 0	; 21
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 29c:	5d 9b       	sbis	0x0b, 5	; 11
 29e:	fe cf       	rjmp	.-4      	; 0x29c <main+0x70>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 2a0:	1c b9       	out	0x0c, r17	; 12
 2a2:	88 eb       	ldi	r24, 0xB8	; 184
 2a4:	9b e0       	ldi	r25, 0x0B	; 11
 2a6:	fe 01       	movw	r30, r28
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <main+0x7a>
			uart_putc('a');		
			_delay_ms(300);
			cbi(PORTC,0);
 2b0:	a8 98       	cbi	0x15, 0	; 21
 2b2:	88 eb       	ldi	r24, 0xB8	; 184
 2b4:	9b e0       	ldi	r25, 0x0B	; 11
 2b6:	fe 01       	movw	r30, r28
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2be:	d9 f7       	brne	.-10     	; 0x2b6 <main+0x8a>
 2c0:	cf cf       	rjmp	.-98     	; 0x260 <main+0x34>

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
